// Copyright 2024 DoltHub, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: This file was is automatically generated. DO NOT EDIT BY HAND.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.28.3
// source: dolt/services/doltci/v1alpha1/constants.proto

package doltci

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WorkflowEventTriggerType int32

const (
	WorkflowEventTriggerType_WORKFLOW_EVENT_TRIGGER_TYPE_UNSPECIFIED       WorkflowEventTriggerType = 0
	WorkflowEventTriggerType_WORKFLOW_EVENT_TRIGGER_TYPE_BRANCHES          WorkflowEventTriggerType = 1
	WorkflowEventTriggerType_WORKFLOW_EVENT_TRIGGER_TYPE_ACTIVITIES        WorkflowEventTriggerType = 2
	WorkflowEventTriggerType_WORKFLOW_EVENT_TRIGGER_TYPE_WORKFLOW_DISPATCH WorkflowEventTriggerType = 3
)

// Enum value maps for WorkflowEventTriggerType.
var (
	WorkflowEventTriggerType_name = map[int32]string{
		0: "WORKFLOW_EVENT_TRIGGER_TYPE_UNSPECIFIED",
		1: "WORKFLOW_EVENT_TRIGGER_TYPE_BRANCHES",
		2: "WORKFLOW_EVENT_TRIGGER_TYPE_ACTIVITIES",
		3: "WORKFLOW_EVENT_TRIGGER_TYPE_WORKFLOW_DISPATCH",
	}
	WorkflowEventTriggerType_value = map[string]int32{
		"WORKFLOW_EVENT_TRIGGER_TYPE_UNSPECIFIED":       0,
		"WORKFLOW_EVENT_TRIGGER_TYPE_BRANCHES":          1,
		"WORKFLOW_EVENT_TRIGGER_TYPE_ACTIVITIES":        2,
		"WORKFLOW_EVENT_TRIGGER_TYPE_WORKFLOW_DISPATCH": 3,
	}
)

func (x WorkflowEventTriggerType) Enum() *WorkflowEventTriggerType {
	p := new(WorkflowEventTriggerType)
	*p = x
	return p
}

func (x WorkflowEventTriggerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowEventTriggerType) Descriptor() protoreflect.EnumDescriptor {
	return file_dolt_services_doltci_v1alpha1_constants_proto_enumTypes[0].Descriptor()
}

func (WorkflowEventTriggerType) Type() protoreflect.EnumType {
	return &file_dolt_services_doltci_v1alpha1_constants_proto_enumTypes[0]
}

func (x WorkflowEventTriggerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowEventTriggerType.Descriptor instead.
func (WorkflowEventTriggerType) EnumDescriptor() ([]byte, []int) {
	return file_dolt_services_doltci_v1alpha1_constants_proto_rawDescGZIP(), []int{0}
}

type WorkflowEventType int32

const (
	WorkflowEventType_WORKFLOW_EVENT_TYPE_UNSPECIFIED       WorkflowEventType = 0
	WorkflowEventType_WORKFLOW_EVENT_TYPE_PUSH              WorkflowEventType = 1
	WorkflowEventType_WORKFLOW_EVENT_TYPE_PULL_REQUEST      WorkflowEventType = 2
	WorkflowEventType_WORKFLOW_EVENT_TYPE_WORKFLOW_DISPATCH WorkflowEventType = 3
)

// Enum value maps for WorkflowEventType.
var (
	WorkflowEventType_name = map[int32]string{
		0: "WORKFLOW_EVENT_TYPE_UNSPECIFIED",
		1: "WORKFLOW_EVENT_TYPE_PUSH",
		2: "WORKFLOW_EVENT_TYPE_PULL_REQUEST",
		3: "WORKFLOW_EVENT_TYPE_WORKFLOW_DISPATCH",
	}
	WorkflowEventType_value = map[string]int32{
		"WORKFLOW_EVENT_TYPE_UNSPECIFIED":       0,
		"WORKFLOW_EVENT_TYPE_PUSH":              1,
		"WORKFLOW_EVENT_TYPE_PULL_REQUEST":      2,
		"WORKFLOW_EVENT_TYPE_WORKFLOW_DISPATCH": 3,
	}
)

func (x WorkflowEventType) Enum() *WorkflowEventType {
	p := new(WorkflowEventType)
	*p = x
	return p
}

func (x WorkflowEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_dolt_services_doltci_v1alpha1_constants_proto_enumTypes[1].Descriptor()
}

func (WorkflowEventType) Type() protoreflect.EnumType {
	return &file_dolt_services_doltci_v1alpha1_constants_proto_enumTypes[1]
}

func (x WorkflowEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowEventType.Descriptor instead.
func (WorkflowEventType) EnumDescriptor() ([]byte, []int) {
	return file_dolt_services_doltci_v1alpha1_constants_proto_rawDescGZIP(), []int{1}
}

type DoltCISavedQueryExpectedResultsType int32

const (
	DoltCISavedQueryExpectedResultsType_SAVED_QUERY_EXPECTED_RESULTS_TYPE_UNSPECIFIED      DoltCISavedQueryExpectedResultsType = 0
	DoltCISavedQueryExpectedResultsType_SAVED_QUERY_EXPECTED_RESULTS_TYPE_ROW_COLUMN_COUNT DoltCISavedQueryExpectedResultsType = 1
)

// Enum value maps for DoltCISavedQueryExpectedResultsType.
var (
	DoltCISavedQueryExpectedResultsType_name = map[int32]string{
		0: "SAVED_QUERY_EXPECTED_RESULTS_TYPE_UNSPECIFIED",
		1: "SAVED_QUERY_EXPECTED_RESULTS_TYPE_ROW_COLUMN_COUNT",
	}
	DoltCISavedQueryExpectedResultsType_value = map[string]int32{
		"SAVED_QUERY_EXPECTED_RESULTS_TYPE_UNSPECIFIED":      0,
		"SAVED_QUERY_EXPECTED_RESULTS_TYPE_ROW_COLUMN_COUNT": 1,
	}
)

func (x DoltCISavedQueryExpectedResultsType) Enum() *DoltCISavedQueryExpectedResultsType {
	p := new(DoltCISavedQueryExpectedResultsType)
	*p = x
	return p
}

func (x DoltCISavedQueryExpectedResultsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DoltCISavedQueryExpectedResultsType) Descriptor() protoreflect.EnumDescriptor {
	return file_dolt_services_doltci_v1alpha1_constants_proto_enumTypes[2].Descriptor()
}

func (DoltCISavedQueryExpectedResultsType) Type() protoreflect.EnumType {
	return &file_dolt_services_doltci_v1alpha1_constants_proto_enumTypes[2]
}

func (x DoltCISavedQueryExpectedResultsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DoltCISavedQueryExpectedResultsType.Descriptor instead.
func (DoltCISavedQueryExpectedResultsType) EnumDescriptor() ([]byte, []int) {
	return file_dolt_services_doltci_v1alpha1_constants_proto_rawDescGZIP(), []int{2}
}

type DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType int32

const (
	DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType_WORKFLOW_SAVED_QUERY_EXPECTED_ROW_COLUMN_COMPARISON_TYPE_UNSPECIFIED           DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType = 0
	DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType_WORKFLOW_SAVED_QUERY_EXPECTED_ROW_COLUMN_COMPARISON_TYPE_EQUALS                DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType = 1
	DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType_WORKFLOW_SAVED_QUERY_EXPECTED_ROW_COLUMN_COMPARISON_TYPE_NOT_EQUALS            DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType = 2
	DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType_WORKFLOW_SAVED_QUERY_EXPECTED_ROW_COLUMN_COMPARISON_TYPE_LESS_THAN             DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType = 3
	DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType_WORKFLOW_SAVED_QUERY_EXPECTED_ROW_COLUMN_COMPARISON_TYPE_GREATER_THAN          DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType = 4
	DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType_WORKFLOW_SAVED_QUERY_EXPECTED_ROW_COLUMN_COMPARISON_TYPE_LESS_THAN_OR_EQUAL    DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType = 5
	DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType_WORKFLOW_SAVED_QUERY_EXPECTED_ROW_COLUMN_COMPARISON_TYPE_GREATER_THAN_OR_EQUAL DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType = 6
)

// Enum value maps for DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType.
var (
	DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType_name = map[int32]string{
		0: "WORKFLOW_SAVED_QUERY_EXPECTED_ROW_COLUMN_COMPARISON_TYPE_UNSPECIFIED",
		1: "WORKFLOW_SAVED_QUERY_EXPECTED_ROW_COLUMN_COMPARISON_TYPE_EQUALS",
		2: "WORKFLOW_SAVED_QUERY_EXPECTED_ROW_COLUMN_COMPARISON_TYPE_NOT_EQUALS",
		3: "WORKFLOW_SAVED_QUERY_EXPECTED_ROW_COLUMN_COMPARISON_TYPE_LESS_THAN",
		4: "WORKFLOW_SAVED_QUERY_EXPECTED_ROW_COLUMN_COMPARISON_TYPE_GREATER_THAN",
		5: "WORKFLOW_SAVED_QUERY_EXPECTED_ROW_COLUMN_COMPARISON_TYPE_LESS_THAN_OR_EQUAL",
		6: "WORKFLOW_SAVED_QUERY_EXPECTED_ROW_COLUMN_COMPARISON_TYPE_GREATER_THAN_OR_EQUAL",
	}
	DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType_value = map[string]int32{
		"WORKFLOW_SAVED_QUERY_EXPECTED_ROW_COLUMN_COMPARISON_TYPE_UNSPECIFIED":           0,
		"WORKFLOW_SAVED_QUERY_EXPECTED_ROW_COLUMN_COMPARISON_TYPE_EQUALS":                1,
		"WORKFLOW_SAVED_QUERY_EXPECTED_ROW_COLUMN_COMPARISON_TYPE_NOT_EQUALS":            2,
		"WORKFLOW_SAVED_QUERY_EXPECTED_ROW_COLUMN_COMPARISON_TYPE_LESS_THAN":             3,
		"WORKFLOW_SAVED_QUERY_EXPECTED_ROW_COLUMN_COMPARISON_TYPE_GREATER_THAN":          4,
		"WORKFLOW_SAVED_QUERY_EXPECTED_ROW_COLUMN_COMPARISON_TYPE_LESS_THAN_OR_EQUAL":    5,
		"WORKFLOW_SAVED_QUERY_EXPECTED_ROW_COLUMN_COMPARISON_TYPE_GREATER_THAN_OR_EQUAL": 6,
	}
)

func (x DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType) Enum() *DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType {
	p := new(DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType)
	*p = x
	return p
}

func (x DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType) Descriptor() protoreflect.EnumDescriptor {
	return file_dolt_services_doltci_v1alpha1_constants_proto_enumTypes[3].Descriptor()
}

func (DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType) Type() protoreflect.EnumType {
	return &file_dolt_services_doltci_v1alpha1_constants_proto_enumTypes[3]
}

func (x DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType.Descriptor instead.
func (DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType) EnumDescriptor() ([]byte, []int) {
	return file_dolt_services_doltci_v1alpha1_constants_proto_rawDescGZIP(), []int{3}
}

type WorkflowStepType int32

const (
	WorkflowStepType_WORKFLOW_STEP_TYPE_UNSPECIFIED WorkflowStepType = 0
	WorkflowStepType_WORKFLOW_STEP_TYPE_SAVED_QUERY WorkflowStepType = 1
)

// Enum value maps for WorkflowStepType.
var (
	WorkflowStepType_name = map[int32]string{
		0: "WORKFLOW_STEP_TYPE_UNSPECIFIED",
		1: "WORKFLOW_STEP_TYPE_SAVED_QUERY",
	}
	WorkflowStepType_value = map[string]int32{
		"WORKFLOW_STEP_TYPE_UNSPECIFIED": 0,
		"WORKFLOW_STEP_TYPE_SAVED_QUERY": 1,
	}
)

func (x WorkflowStepType) Enum() *WorkflowStepType {
	p := new(WorkflowStepType)
	*p = x
	return p
}

func (x WorkflowStepType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowStepType) Descriptor() protoreflect.EnumDescriptor {
	return file_dolt_services_doltci_v1alpha1_constants_proto_enumTypes[4].Descriptor()
}

func (WorkflowStepType) Type() protoreflect.EnumType {
	return &file_dolt_services_doltci_v1alpha1_constants_proto_enumTypes[4]
}

func (x WorkflowStepType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowStepType.Descriptor instead.
func (WorkflowStepType) EnumDescriptor() ([]byte, []int) {
	return file_dolt_services_doltci_v1alpha1_constants_proto_rawDescGZIP(), []int{4}
}

var File_dolt_services_doltci_v1alpha1_constants_proto protoreflect.FileDescriptor

var file_dolt_services_doltci_v1alpha1_constants_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x64, 0x6f, 0x6c, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x64, 0x6f, 0x6c, 0x74, 0x63, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1d, 0x64, 0x6f, 0x6c, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x64,
	0x6f, 0x6c, 0x74, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2a, 0xd0,
	0x01, 0x0a, 0x18, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x27, 0x57,
	0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x57, 0x4f, 0x52, 0x4b,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x53,
	0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x02, 0x12, 0x31,
	0x0a, 0x2d, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x4f,
	0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10,
	0x03, 0x2a, 0xa7, 0x01, 0x0a, 0x11, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x57, 0x4f, 0x52, 0x4b, 0x46,
	0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x57, 0x4f,
	0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x55, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02,
	0x12, 0x29, 0x0a, 0x25, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10, 0x03, 0x2a, 0x90, 0x01, 0x0a, 0x23,
	0x44, 0x6f, 0x6c, 0x74, 0x43, 0x49, 0x53, 0x61, 0x76, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x41, 0x56, 0x45, 0x44, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x36, 0x0a, 0x32, 0x53, 0x41, 0x56, 0x45, 0x44, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x57, 0x5f,
	0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0xc9,
	0x04, 0x0a, 0x37, 0x44, 0x6f, 0x6c, 0x74, 0x43, 0x49, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x53, 0x61, 0x76, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x44, 0x57, 0x4f,
	0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x44, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x4f, 0x57, 0x5f,
	0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x43, 0x0a, 0x3f, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57,
	0x5f, 0x53, 0x41, 0x56, 0x45, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x50,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x01, 0x12, 0x47, 0x0a, 0x43, 0x57, 0x4f, 0x52,
	0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x4f, 0x57, 0x5f, 0x43,
	0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53,
	0x10, 0x02, 0x12, 0x46, 0x0a, 0x42, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53,
	0x41, 0x56, 0x45, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x5f, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c,
	0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x49, 0x0a, 0x45, 0x57, 0x4f,
	0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x44, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x4f, 0x57, 0x5f,
	0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54,
	0x48, 0x41, 0x4e, 0x10, 0x04, 0x12, 0x4f, 0x0a, 0x4b, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x58,
	0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d,
	0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45,
	0x51, 0x55, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x52, 0x0a, 0x4e, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c,
	0x4f, 0x57, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x45,
	0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4c, 0x55,
	0x4d, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f,
	0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x06, 0x2a, 0x5a, 0x0a, 0x10, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x1e, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53,
	0x54, 0x45, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x44, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x10, 0x01, 0x42, 0x4b, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x6c, 0x74, 0x68, 0x75, 0x62, 0x2f, 0x64, 0x6f, 0x6c,
	0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64,
	0x6f, 0x6c, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x64, 0x6f, 0x6c,
	0x74, 0x63, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x64, 0x6f, 0x6c,
	0x74, 0x63, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dolt_services_doltci_v1alpha1_constants_proto_rawDescOnce sync.Once
	file_dolt_services_doltci_v1alpha1_constants_proto_rawDescData = file_dolt_services_doltci_v1alpha1_constants_proto_rawDesc
)

func file_dolt_services_doltci_v1alpha1_constants_proto_rawDescGZIP() []byte {
	file_dolt_services_doltci_v1alpha1_constants_proto_rawDescOnce.Do(func() {
		file_dolt_services_doltci_v1alpha1_constants_proto_rawDescData = protoimpl.X.CompressGZIP(file_dolt_services_doltci_v1alpha1_constants_proto_rawDescData)
	})
	return file_dolt_services_doltci_v1alpha1_constants_proto_rawDescData
}

var file_dolt_services_doltci_v1alpha1_constants_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_dolt_services_doltci_v1alpha1_constants_proto_goTypes = []interface{}{
	(WorkflowEventTriggerType)(0),                                // 0: dolt.services.doltci.v1alpha1.WorkflowEventTriggerType
	(WorkflowEventType)(0),                                       // 1: dolt.services.doltci.v1alpha1.WorkflowEventType
	(DoltCISavedQueryExpectedResultsType)(0),                     // 2: dolt.services.doltci.v1alpha1.DoltCISavedQueryExpectedResultsType
	(DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType)(0), // 3: dolt.services.doltci.v1alpha1.DoltCIWorkflowSavedQueryExpectedRowColumnComparisonType
	(WorkflowStepType)(0),                                        // 4: dolt.services.doltci.v1alpha1.WorkflowStepType
}
var file_dolt_services_doltci_v1alpha1_constants_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_dolt_services_doltci_v1alpha1_constants_proto_init() }
func file_dolt_services_doltci_v1alpha1_constants_proto_init() {
	if File_dolt_services_doltci_v1alpha1_constants_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dolt_services_doltci_v1alpha1_constants_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dolt_services_doltci_v1alpha1_constants_proto_goTypes,
		DependencyIndexes: file_dolt_services_doltci_v1alpha1_constants_proto_depIdxs,
		EnumInfos:         file_dolt_services_doltci_v1alpha1_constants_proto_enumTypes,
	}.Build()
	File_dolt_services_doltci_v1alpha1_constants_proto = out.File
	file_dolt_services_doltci_v1alpha1_constants_proto_rawDesc = nil
	file_dolt_services_doltci_v1alpha1_constants_proto_goTypes = nil
	file_dolt_services_doltci_v1alpha1_constants_proto_depIdxs = nil
}
